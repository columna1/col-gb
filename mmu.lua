local function mmu(file)
	local self = {
		--rom = {}
		workingRam = {},--C000-DFFF/E000-FDFF
		zeroPage = {},--FF80-FFFF
		romBank0 = {}--0000-3FFF
	}
	for i = 0xC000,0xDFFF do
		self.workingRam[i-0xC000] = 0--init working ram to 0
	end
	for i = 0xFF80,0xFFFF do
		self.zeroPage[i-0xFF80] = 0--init working ram to 0
	end
	local bios = {[0]=0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, 
0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, 
0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, 
0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, 
0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, 
0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, 
0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, 
0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, 
0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, 
0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, 
0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 
0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 
0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 
0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, 
0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20, 
0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50}--bios rom WARNING Â© NINTENDO

	if not file then error("no rom to load") end
	local romFile = io.open(file,"rb")
	if not romFile then error("could not open rom") end
	local str = romFile:read("*a")
	local rom = {}
	for i = 1,#str do
		rom[i-1] = string.byte(str:sub(i,i))
	end
	for i = 0x0000,0x3FFF do
		self.romBank0[i] = rom[i]
	end


	function self.getByte(addr)
		print(string.format("get byte addr: 0x%x(%d)",addr,addr))
		local function pr(num)
			print(string.format("returned value: 0x%x(%d)",num,num))
		end
		if addr >= 0x00 and addr < 0x100 then
			--accessing bios
			--print("get byte ",addr,bios[addr])
			print("from bios")
			pr(bios[addr])
			return bios[addr]
		end
		if addr >= 0x0000 and addr <= 0x3FFF then
			--print("get byte ",addr,rom[addr-0x100])
			print("from rom")
			pr(self.romBank0[addr])
			return self.romBank0[addr]
		end
		if addr >= 0xC000 and addr <= 0xDFFF then
			print("from ram")
			pr(self.workingRam[addr-0xC000])
			return self.workingRam[addr-0xC000]
		end
		if addr >= 0xE000 and addr <= 0xFDFF then--shadow
			print("from ram copy")
			pr(self.workingRam[addr-0xE000])
			return self.workingRam[addr-0xE000]
		end
		if addr >= 0xFF80 and addr <= 0xFFFF then
			print("from zero page")
			pr(self.workingRam[addr-0xE000])
			return self.zeroPage[addr-0xFF80]
		end
		return 0
	end
	function self.setByte(byte,addr)
		print(string.format("set byte addr: 0x%x(%d) value: 0x%x(%d)",addr,addr,byte,byte))
		if addr >= 0xC000 and addr <= 0xDFFF then
			print("to ram")
			self.workingRam[addr-0xC000] = byte
		end
		if addr >= 0xE000 and addr <= 0xFDFF then--shadow
			print("to ram copy")
			self.workingRam[addr-0xE000] = byte
		end
		if addr >= 0xFF80 and addr <= 0xFFFF then
			print("to zero page")
			self.zeroPage[addr-0xFF80] = byte
		end
	end
	function self.getSignedByte(addr,signExtend)
		--account for 2's compliment
		local byte = self.getByte(addr)
		if bit.band(byte,0x80) > 0 then
			byte = -(bit.band(bit.bnot(byte),0xFF)+1)
		end
		--sign extend
		
		return byte
	end
	
	return self
end

return mmu